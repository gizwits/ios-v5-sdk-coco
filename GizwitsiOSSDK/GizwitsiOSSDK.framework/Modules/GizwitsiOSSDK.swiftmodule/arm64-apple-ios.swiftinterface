// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name GizwitsiOSSDK
import Combine
import CoreBluetooth
import CoreTelephony
import Darwin
import Foundation
@_exported import GizwitsiOSSDK
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum GizActivatorException : Swift.Int, Swift.Codable {
  case GIZ_SDK_DEVICE_CONFIG_TIMEOUT
  case GIZ_SDK_BLE_DEVICE_NOT_FOUND
  case GIZ_SDK_DEVICE_CONFIG_IS_RUNNING
  case GIZ_SDK_CONNECTION_REFUSED
  case GIZ_SDK_CONNECTING
  case GIZ_SDK_DEVICE_NOT_READY
  case GIZ_SDK_DISCONNECT_FAILED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ActivatorProfile {
  var mac: Swift.String? { get }
  var did: Swift.String? { get }
  var productKey: Swift.String? { get }
  var deviceTypes: [Swift.UInt8]? { get }
  var apiDomain: Swift.String? { get }
  var moduleSoftVer: Swift.String? { get }
  var mcuSoftVer: Swift.String? { get }
}
public struct GizProductInfoStruct : Swift.Codable {
  public var productKey: Swift.String
  public var productSecret: Swift.String
  public init(productKey: Swift.String, productSecret: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizServerInfoStruct : Swift.Codable {
  public var openAPIInfo: Swift.String
  public init(openAPIInfo: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizConfigStruct : Swift.Codable {
  public var appID: Swift.String
  public var appSecret: Swift.String
  public var productInfos: [GizwitsiOSSDK.GizProductInfoStruct]
  public var serverInfo: GizwitsiOSSDK.GizServerInfoStruct?
  public init(appID: Swift.String, appSecret: Swift.String, productInfos: [GizwitsiOSSDK.GizProductInfoStruct], serverInfo: GizwitsiOSSDK.GizServerInfoStruct?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class GizMQTTCapability : GizwitsiOSSDK.GizBaseCapability {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GizBaseCapability : Foundation.ObservableObject, Swift.Encodable {
  @Combine.Published @_projectedValueProperty($isActive) public var isActive: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isActive: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($deviceProfile) public var deviceProfile: GizwitsiOSSDK.GizBaseProfile? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $deviceProfile: Combine.Published<GizwitsiOSSDK.GizBaseProfile?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var isLogin: Swift.Bool {
    get
    set
  }
  public var isOnline: Swift.Bool {
    get
    set
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public var netStatus: GizwitsiOSSDK.GizWifiDeviceNetStatus {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func getDeviceInfo() async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.DeviceInfoProfile?, GizwitsiOSSDK.GizCtrlException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getDp(attrs: [Swift.String]?) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizJSON?, GizwitsiOSSDK.GizCtrlException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func connect() async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizConnectException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func disConnect() async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizConnectException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func provideWiFiCredentials(ssid: Swift.String, password: Swift.String, timeout: Swift.Int, processHandler: @escaping (GizwitsiOSSDK.GizWiFiActivatorEvent) -> ()) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizBaseProfile?, GizwitsiOSSDK.GizActivatorException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func stopProvideWiFiCredentials() async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizActivatorException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendDp(data: GizwitsiOSSDK.GizJSON) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizJSON?, GizwitsiOSSDK.GizCtrlException?>
  #endif
  public func removeDeviceDataListener(closure: @escaping (_ data: GizwitsiOSSDK.GizJSON) -> Swift.Void)
  public func addDeviceDataListener(closure: @escaping (_ data: GizwitsiOSSDK.GizJSON) -> Swift.Void)
  #if compiler(>=5.3) && $AsyncAwait
  public func checkUpdate(firmwareType: GizwitsiOSSDK.GizOTAFirmwareType) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizCheckUpdateResultInfo, GizwitsiOSSDK.GizOTAException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func startUpgrade(firmwareType: GizwitsiOSSDK.GizOTAFirmwareType, progressHandler: @escaping (GizwitsiOSSDK.GizOTAProgressData) -> Swift.Void) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizOTAException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func cancelUpgrade() async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizOTAException?>
  #endif
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum AuthenticationMethod : Swift.String {
  case oneProductKey
  case oneKey
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GizProtocolVersion : Swift.String {
  case V5
  case V2
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol GizBaseProfileProvider {
  var mac: Swift.String { get }
  var productKey: Swift.String { get }
  var did: Swift.String? { get }
  var protocolVersion: GizwitsiOSSDK.GizProtocolVersion { get }
  var supportOTA: Swift.Bool { get set }
  var requiresAuthentication: Swift.Bool { get set }
  var authenticationMethod: GizwitsiOSSDK.AuthenticationMethod { get set }
  var rootDid: Swift.String? { get }
  var moduleSoftVer: Swift.String? { get }
  var moduleHardVer: Swift.String? { get }
  var configured: Swift.Bool? { get }
  var mcuSoftVer: Swift.String? { get }
  var mcuHardVer: Swift.String? { get }
  var isBind: Swift.Bool { get }
  var name: Swift.String { get }
}
@_hasMissingDesignatedInitializers public class GizBaseProfile : GizwitsiOSSDK.GizBaseProfileProvider, Foundation.ObservableObject, Swift.Encodable {
  public var id: Swift.String {
    get
  }
  public var mac: Swift.String {
    get
  }
  @Combine.Published @_projectedValueProperty($isOnline) public var isOnline: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isOnline: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLogin) public var isLogin: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isLogin: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var productKey: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public var remark: Swift.String {
    get
  }
  @Combine.Published @_projectedValueProperty($did) public var did: Swift.String? {
    get
  }
  public var $did: Combine.Published<Swift.String?>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($protocolVersion) public var protocolVersion: GizwitsiOSSDK.GizProtocolVersion {
    get
  }
  public var $protocolVersion: Combine.Published<GizwitsiOSSDK.GizProtocolVersion>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($supportOTA) public var supportOTA: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $supportOTA: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($requiresAuthentication) public var requiresAuthentication: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $requiresAuthentication: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($authenticationMethod) public var authenticationMethod: GizwitsiOSSDK.AuthenticationMethod {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $authenticationMethod: Combine.Published<GizwitsiOSSDK.AuthenticationMethod>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($rootDid) public var rootDid: Swift.String? {
    get
  }
  public var $rootDid: Combine.Published<Swift.String?>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($moduleSoftVer) public var moduleSoftVer: Swift.String? {
    get
  }
  public var $moduleSoftVer: Combine.Published<Swift.String?>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($moduleHardVer) public var moduleHardVer: Swift.String? {
    get
  }
  public var $moduleHardVer: Combine.Published<Swift.String?>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($configured) public var configured: Swift.Bool? {
    get
  }
  public var $configured: Combine.Published<Swift.Bool?>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($mcuSoftVer) public var mcuSoftVer: Swift.String? {
    get
  }
  public var $mcuSoftVer: Combine.Published<Swift.String?>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($mcuHardVer) public var mcuHardVer: Swift.String? {
    get
  }
  public var $mcuHardVer: Combine.Published<Swift.String?>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($isBind) public var isBind: Swift.Bool {
    get
  }
  public var $isBind: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public func isSame(device: GizwitsiOSSDK.GizBaseProfile) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  public func getDataPointConfig() async -> GizwitsiOSSDK.DataPointConfig?
  #endif
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol GizLanProfileProvider : GizwitsiOSSDK.GizBaseProfileProvider {
  var port: Swift.UInt16 { get }
  var cTime: Swift.Int { get set }
  var ip: Swift.String { get set }
}
@_hasMissingDesignatedInitializers public class GizLanProfile : GizwitsiOSSDK.GizBaseProfile, Swift.Equatable, GizwitsiOSSDK.GizLanProfileProvider {
  public static func == (lhs: GizwitsiOSSDK.GizLanProfile, rhs: GizwitsiOSSDK.GizLanProfile) -> Swift.Bool
  public var port: Swift.UInt16
  @Combine.Published @_projectedValueProperty($ip) public var ip: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $ip: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($cTime) public var cTime: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $cTime: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public protocol GizMQTTProfileProvider : GizwitsiOSSDK.GizBaseProfileProvider {
  var port: Swift.UInt16 { get }
  var host: Swift.String { get set }
  var isOnline: Swift.Bool { get set }
  var rootDid: Swift.String? { get }
}
@_hasMissingDesignatedInitializers public class GizMqttProfile : GizwitsiOSSDK.GizBaseProfile, Swift.Equatable, GizwitsiOSSDK.GizMQTTProfileProvider {
  @Combine.Published @_projectedValueProperty($host) public var host: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $host: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($port) public var port: Swift.UInt16 {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $port: Combine.Published<Swift.UInt16>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public static func == (lhs: GizwitsiOSSDK.GizMqttProfile, rhs: GizwitsiOSSDK.GizMqttProfile) -> Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum BlueToothType : Swift.String {
  case Mesh
  case Beacon
  case Voice
  case GATT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BlueToothVersion : Swift.String {
  case BLE4
  case BLE42
  case BLE50
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol GizBleProfileProvider : GizwitsiOSSDK.GizBaseProfileProvider {
  var name: Swift.String { get }
  var deviceId: Swift.String { get }
  var cTime: Swift.Int { get set }
  var RSSI: Foundation.NSNumber { get set }
  var peripheral: CoreBluetooth.CBPeripheral? { get set }
  var blueToothType: GizwitsiOSSDK.BlueToothType { get set }
  var blueToothVersion: GizwitsiOSSDK.BlueToothVersion { get set }
}
@_hasMissingDesignatedInitializers public class GizBleProfile : GizwitsiOSSDK.GizBaseProfile, Swift.Equatable, GizwitsiOSSDK.GizBleProfileProvider {
  @Combine.Published @_projectedValueProperty($deviceId) public var deviceId: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $deviceId: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($cTime) public var cTime: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $cTime: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($RSSI) public var RSSI: Foundation.NSNumber {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $RSSI: Combine.Published<Foundation.NSNumber>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($blueToothType) public var blueToothType: GizwitsiOSSDK.BlueToothType {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $blueToothType: Combine.Published<GizwitsiOSSDK.BlueToothType>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($blueToothVersion) public var blueToothVersion: GizwitsiOSSDK.BlueToothVersion {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $blueToothVersion: Combine.Published<GizwitsiOSSDK.BlueToothVersion>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var peripheral: CoreBluetooth.CBPeripheral?
  public static func == (lhs: GizwitsiOSSDK.GizBleProfile, rhs: GizwitsiOSSDK.GizBleProfile) -> Swift.Bool
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum GizOTAException : Swift.Int, Swift.Codable {
  case GIZ_SDK_OTA_UPGRADE_FAILED
  case GIZ_SDK_DEVICE_NOT_SUPPORT
  case GIZ_OPENAPI_DEVICE_NOT_FOUND
  case GIZ_SDK_PARAM_INVALID
  case GIZ_SDK_OTA_FIRMWARE_CHECK_FAILED
  case GIZ_OPENAPI_DEVICE_ALREADY_UPGRADE
  case GIZ_SDK_NO_OTA_PUSH_RULE
  case GIZ_SDK_OTHERWISE
  case GIZ_SDK_REQUEST_TIMEOUT
  case GIZ_SDK_OTA_FIRMWARE_DOWNLOAD_FAILED
  case GIZ_SDK_OTA_FIRMWARE_LENGTH_ERROR
  case GIZ_SDK_OTA_FIRMWARE_CRC32_ERROR
  case GIZ_SDK_OTA_CANCEL
  case GIZ_SDK_OTA_DEVICE_BUSY_IN_UPGRADE
  case GIZ_SITE_PRODUCTKEY_INVALID
  case GIZ_SDK_OTA_FIRMWARE_VERSION_TOO_LOW
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GizAPIException : Swift.Int, Swift.Codable {
  case GIZ_SDK_PARAM_INVALID
  case GIZ_OPEN_API_UNKNOW_ERROR
  case GIZ_OPENAPI_MAC_ALREADY_REGISTERED
  case GIZ_OPENAPI_PRODUCT_KEY_INVALID
  case GIZ_OPENAPI_APPID_INVALID
  case GIZ_OPENAPI_TOKEN_INVALID
  case GIZ_OPENAPI_USER_NOT_EXIST
  case GIZ_OPENAPI_TOKEN_EXPIRED
  case GIZ_OPENAPI_M2M_ID_INVALID
  case GIZ_OPENAPI_SERVER_ERROR
  case GIZ_OPENAPI_CODE_EXPIRED
  case GIZ_OPENAPI_CODE_INVALID
  case GIZ_OPENAPI_SANDBOX_SCALE_QUOTA_EXHAUSTED
  case GIZ_OPENAPI_PRODUCTION_SCALE_QUOTA_EXHAUSTED
  case GIZ_OPENAPI_PRODUCT_HAS_NO_REQUEST_SCALE
  case GIZ_OPENAPI_DEVICE_NOT_FOUND
  case GIZ_OPENAPI_FORM_INVALID
  case GIZ_OPENAPI_DID_PASSCODE_INVALID
  case GIZ_OPENAPI_DEVICE_NOT_BOUND
  case GIZ_OPENAPI_PHONE_UNAVALIABLE
  case GIZ_OPENAPI_USERNAME_UNAVALIABLE
  case GIZ_OPENAPI_USERNAME_PASSWORD_ERROR
  case GIZ_OPENAPI_SEND_COMMAND_FAILED
  case GIZ_OPENAPI_EMAIL_UNAVALIABLE
  case GIZ_OPENAPI_DEVICE_DISABLED
  case GIZ_OPENAPI_FAILED_NOTIFY_M2M
  case GIZ_OPENAPI_ATTR_INVALID
  case GIZ_OPENAPI_USER_INVALID
  case GIZ_OPENAPI_FIRMWARE_NOT_FOUND
  case GIZ_OPENAPI_JD_PRODUCT_NOT_FOUND
  case GIZ_OPENAPI_DATAPOINT_DATA_NOT_FOUND
  case GIZ_OPENAPI_SCHEDULER_NOT_FOUND
  case GIZ_OPENAPI_QQ_OAUTH_KEY_INVALID
  case GIZ_OPENAPI_BT_FIRMWARE_UNVERIFIED
  case GIZ_OPENAPI_BT_FIRMWARE_NOTHING_TO_UPGRADE
  case GIZ_OPENAPI_SAVE_KAIROSDB_ERROR
  case GIZ_OPENAPI_EVENT_NOT_DEFINED
  case GIZ_OPENAPI_SEND_SMS_FAILED
  case GIZ_OPENAPI_APPLICATION_AUTH_INVALID
  case GIZ_OPENAPI_NOT_ALLOWED_CALL_API
  case GIZ_OPENAPI_BAD_QRCODE_CONTENT
  case GIZ_OPENAPI_REQUEST_THROTTLED
  case GIZ_OPENAPI_DEVICE_OFFLINE
  case GIZ_OPENAPI_TIMESTAMP_INVALID
  case GIZ_OPENAPI_SIGNATURE_INVALID
  case GIZ_OPENAPI_DEPRECATED_API
  case GIZ_OPENAPI_REGISTER_IS_BUSY
  case GIZ_OPENAPI_ALTER_PASSWORD_FAILED
  case GIZ_OPENAPI_APPID_PK_NOT_RELATION
  case GIZ_OPENAPI_CALL_INNER_FAILED
  case GIZ_OPENAPI_DEVICE_SHARING_NOT_ENABLED
  case GIZ_OPENAPI_NOT_FIRST_USER_OF_DEVICE
  case GIZ_OPENAPI_PRODUCT_KEY_AUTHEN_FAULT
  case GIZ_OPENAPI_BUSY_NOW
  case GIZ_OPENAPI_TWITTER_CONSUMER_KEY_INVALID
  case GIZ_OPENAPI_NOT_ALLOW_WEEK_PASSWORD
  case GIZ_OPENAPI_CANNOT_SHARE_TO_SELF
  case GIZ_OPENAPI_ONLY_OWNER_CAN_SHARE
  case GIZ_OPENAPI_NOT_FOUND_GUEST
  case GIZ_OPENAPI_GUEST_ALREADY_BOUND
  case GIZ_OPENAPI_NOT_FOUND_SHARING_INFO
  case GIZ_OPENAPI_NOT_FOUND_THE_MESSAGE
  case GIZ_OPENAPI_SHARING_IS_WAITING_FOR_ACCEPT
  case GIZ_OPENAPI_SHARING_IS_EXPIRED
  case GIZ_OPENAPI_SHARING_IS_COMPLETED
  case GIZ_OPENAPI_INVALID_SHARING_BECAUSE_UNBINDING
  case GIZ_OPENAPI_ONLY_OWNER_CAN_BIND
  case GIZ_OPENAPI_ONLY_OWNER_CAN_OPERATE
  case GIZ_OPENAPI_SHARING_ALREADY_CANCELLED
  case GIZ_OPENAPI_OWNER_CANNOT_UNBIND_SELF
  case GIZ_OPENAPI_ONLY_GUEST_CAN_CHECK_QRCODE
  case GIZ_OPENAPI_MESSAGE_ALREADY_DELETED
  case GIZ_OPENAPI_BINDING_NOTIFY_FAILED
  case GIZ_OPENAPI_ONLY_SELF_CAN_MODIFY_ALIAS
  case GIZ_OPENAPI_ONLY_RECEIVER_CAN_MARK_MESSAGE
  case GIZ_OPENAPI_GUEST_NOT_BIND
  case GIZ_OPENAPI_CANNOT_TRANSFER_OWNER_TO_SELF
  case GIZ_OPENAPI_TRANSFER_OWNER_TO_LIMIT_GUEST
  case GIZ_OPENAPI_DEVICE_BINDING_TIME_CLOSE
  case GIZ_OPENAPI_DEVICE_ALREADY_UPGRADE
  case GIZ_OPENAPI_RESERVED
  case GIZ_SITE_PRODUCTKEY_INVALID
  case GIZ_SITE_DATAPOINTS_NOT_DEFINED
  case GIZ_SITE_DATAPOINTS_NOT_MALFORME
  case GIZ_SDK_OTHERWISE
  case GIZ_OPENAPI_OTA_SERVICE_OK_BUT_IN_IDLE
  case GIZ_SDK_NO_OTA_PUSH_RULE
  case GIZ_SDK_OTA_FIRMWARE_IS_LATEST
  case GIZ_SDK_OTA_FIRMWARE_CHECK_UPDATE_FAILED
  case GIZ_SDK_OTA_FIRMWARE_DOWNLOAD_OK
  case GIZ_SDK_OTA_FIRMWARE_DOWNLOAD_FAILED
  case GIZ_SDK_OTA_DEVICE_BUSY_IN_UPGRADE
  case GIZ_SDK_OTA_PUSH_FAILED
  case GIZ_SDK_OTA_FIRMWARE_VERSION_TOO_LOW
  case GIZ_SDK_OTA_FIRMWARE_CHECK_FAILED
  case GIZ_SDK_OTA_UPGRADE_FAILED
  case GIZ_SDK_OTA_FIRMWARE_VERIFY_SUCCESS
  case GIZ_SDK_OTA_DEVICE_NOT_SUPPORT
  case GIZ_SDK_OTA_FIRMWARE_TYPE_NOT_MATCH
  case GIZ_SDK_OTA_PRODUCTKEY_NOT_MATCH
  case GIZ_SDK_OTA_FIRMWARE_TOO_BIG
  case GIZ_SDK_OTA_PACKAGE_NUMBER_ERROR
  case GIZ_SDK_OTA_PACKAGE_LENGTH_ERROR
  case GIZ_SDK_OTA_CRC_CHECK_FAILED
  case GIZ_SDK_OTA_CHECK_OR_UPGRADE_IS_RUNNING
  case GIZ_SDK_OTA_CANCEL_OTA_FAILED
  case GIZ_SDK_OTA_DEVICE_ENABLE_NEW_FIRMWARE_FAILED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class GizLanCapability : GizwitsiOSSDK.GizBaseCapability {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension GizwitsiOSSDK.GizUserManager {
  #if compiler(>=5.3) && $AsyncAwait
  public func registerWithAccount(username: Swift.String, password: Swift.String) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizLoginResultInfo?, GizwitsiOSSDK.GizAPIException?>
  #endif
}
@_hasMissingDesignatedInitializers public class GizBleCapability : GizwitsiOSSDK.GizBaseCapability {
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
public enum GizJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension GizwitsiOSSDK.GizJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct GizJSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: GizwitsiOSSDK.GizJSON) throws
  public func merged(with other: GizwitsiOSSDK.GizJSON) throws -> GizwitsiOSSDK.GizJSON
  public var type: GizwitsiOSSDK.`Type` {
    get
  }
  public var error: GizwitsiOSSDK.GizJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: GizwitsiOSSDK.GizJSON {
    get
  }
  public static var null: GizwitsiOSSDK.GizJSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: GizwitsiOSSDK.Index<T>, rhs: GizwitsiOSSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: GizwitsiOSSDK.Index<T>, rhs: GizwitsiOSSDK.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = GizwitsiOSSDK.Index<GizwitsiOSSDK.GizJSON>
public typealias JSONRawIndex = GizwitsiOSSDK.Index<Any>
extension GizwitsiOSSDK.GizJSON : Swift.Collection {
  public typealias Index = GizwitsiOSSDK.JSONRawIndex
  public var startIndex: GizwitsiOSSDK.GizJSON.Index {
    get
  }
  public var endIndex: GizwitsiOSSDK.GizJSON.Index {
    get
  }
  public func index(after i: GizwitsiOSSDK.GizJSON.Index) -> GizwitsiOSSDK.GizJSON.Index
  public subscript(position: GizwitsiOSSDK.GizJSON.Index) -> (Swift.String, GizwitsiOSSDK.GizJSON) {
    get
  }
  public typealias Element = (Swift.String, GizwitsiOSSDK.GizJSON)
  public typealias Indices = Swift.DefaultIndices<GizwitsiOSSDK.GizJSON>
  public typealias Iterator = Swift.IndexingIterator<GizwitsiOSSDK.GizJSON>
  public typealias SubSequence = Swift.Slice<GizwitsiOSSDK.GizJSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: GizwitsiOSSDK.JSONKey { get }
}
extension Swift.Int : GizwitsiOSSDK.JSONSubscriptType {
  public var jsonKey: GizwitsiOSSDK.JSONKey {
    get
  }
}
extension Swift.String : GizwitsiOSSDK.JSONSubscriptType {
  public var jsonKey: GizwitsiOSSDK.JSONKey {
    get
  }
}
extension GizwitsiOSSDK.GizJSON {
  public subscript(path: [any GizwitsiOSSDK.JSONSubscriptType]) -> GizwitsiOSSDK.GizJSON {
    get
    set
  }
  public subscript(path: any GizwitsiOSSDK.JSONSubscriptType...) -> GizwitsiOSSDK.GizJSON {
    get
    set
  }
}
extension GizwitsiOSSDK.GizJSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension GizwitsiOSSDK.GizJSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension GizwitsiOSSDK.GizJSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension GizwitsiOSSDK.GizJSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension GizwitsiOSSDK.GizJSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension GizwitsiOSSDK.GizJSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension GizwitsiOSSDK.GizJSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [GizwitsiOSSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension GizwitsiOSSDK.GizJSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension GizwitsiOSSDK.GizJSON {
  public var array: [GizwitsiOSSDK.GizJSON]? {
    get
  }
  public var arrayValue: [GizwitsiOSSDK.GizJSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension GizwitsiOSSDK.GizJSON {
  public var dictionary: [Swift.String : GizwitsiOSSDK.GizJSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : GizwitsiOSSDK.GizJSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension GizwitsiOSSDK.GizJSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension GizwitsiOSSDK.GizJSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension GizwitsiOSSDK.GizJSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension GizwitsiOSSDK.GizJSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension GizwitsiOSSDK.GizJSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension GizwitsiOSSDK.GizJSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension GizwitsiOSSDK.GizJSON : Swift.Comparable {
}
public func == (lhs: GizwitsiOSSDK.GizJSON, rhs: GizwitsiOSSDK.GizJSON) -> Swift.Bool
public func <= (lhs: GizwitsiOSSDK.GizJSON, rhs: GizwitsiOSSDK.GizJSON) -> Swift.Bool
public func >= (lhs: GizwitsiOSSDK.GizJSON, rhs: GizwitsiOSSDK.GizJSON) -> Swift.Bool
public func > (lhs: GizwitsiOSSDK.GizJSON, rhs: GizwitsiOSSDK.GizJSON) -> Swift.Bool
public func < (lhs: GizwitsiOSSDK.GizJSON, rhs: GizwitsiOSSDK.GizJSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: GizwitsiOSSDK.writingOptionsKeys, b: GizwitsiOSSDK.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension GizwitsiOSSDK.GizJSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum GizWiFiActivatorEvent : Swift.String, Swift.Decodable, Swift.Encodable {
  case GIZ_CONNECT_SUCCESS
  case GIZ_CONFIG_SEND_SUCCESS
  case GIZ_CONFIG_RECV_SUCCESS
  case GIZ_CONFIG_SUCCESS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GizWifiDeviceNetStatus : Swift.Int, Swift.Decodable, Swift.Encodable {
  case GizDeviceOffline
  case GizDeviceOnline
  case GizDeviceControlled
  case GizDeviceUnavailable
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GizOTAFirmwareType : Swift.String, Swift.Decodable, Swift.Encodable {
  case GizOTAFirmareModule
  case GizOTAFirmareMcu
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GizCapability : Swift.String, Swift.Decodable, Swift.Encodable {
  case GizBleCapability
  case GizLanCapability
  case GizMQTTCapability
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RegisterDeviceInfo : Swift.Codable {
  public var did: Swift.String
  public var mac: Swift.String
  public var passcode: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@preconcurrency public protocol _SwiftLogSendableLogHandler : Swift.Sendable {
}
extension GizwitsiOSSDK.GizUserManager {
  #if compiler(>=5.3) && $AsyncAwait
  public func loginWithAccount(username: Swift.String, password: Swift.String) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizLoginResultInfo?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendMobileLoginVerifyCode(phoneCode: Swift.String, phone: Swift.String, lang: Swift.String?) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizVerifyCodeResultInfo?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func loginWithMobile(phoneCode: Swift.String, phone: Swift.String, code: Swift.String) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizLoginResultInfo?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func loginWithEmail(email: Swift.String, code: Swift.String) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizLoginResultInfo?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func sendEmailLoginVerifyCode(email: Swift.String, lang: Swift.String?) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizVerifyCodeResultInfo?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func loginByAnonymous() async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizLoginResultInfo?, GizwitsiOSSDK.GizAPIException?>
  #endif
}
open class GizResult<T, U> : Swift.Encodable where T : Swift.Encodable, U : Swift.Encodable {
  public var message: Swift.String? {
    get
  }
  public var data: T? {
    get
  }
  public var success: Swift.Bool {
    get
  }
  public var error: U? {
    get
  }
  public init(message: Swift.String?, data: T?, error: U?, success: Swift.Bool)
  convenience public init(message: Swift.String?, data: T?, success: Swift.Bool)
  convenience public init(data: T?, success: Swift.Bool)
  convenience public init(successMessage: Swift.String?, data: T?)
  convenience public init()
  convenience public init(error: U?)
  convenience public init(error: U?, message: Swift.String)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
}
public enum GizUserGenderType : Swift.Int {
  case GizUserGenderMale
  case GizUserGenderFemale
  case GizUserGenderUnknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GizAuth2AccountType : Swift.Int {
  case GizThirdGoogle
  case GizThirdApple
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class GizUserProfile {
  public var username: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var lang: Swift.String?
  public var name: Swift.String?
  public var userGender: GizwitsiOSSDK.GizUserGenderType?
  public var birthday: Swift.String?
  public var address: Swift.String?
  public var remark: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GizUserModel : GizwitsiOSSDK.GizUserProfile, Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($uid) public var uid: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $uid: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($token) public var token: Swift.String? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $token: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GizUserManager : GizwitsiOSSDK.GizUserModel {
  public static let sharedInstance: GizwitsiOSSDK.GizUserManager
  #if compiler(>=5.3) && $AsyncAwait
  public func sendVerifyMobileCodeWithPhone(phone: Swift.String, countryCode: Swift.Int) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func resetPasswordByPhone(phone: Swift.String, newPassword: Swift.String, code: Swift.String) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func resetPasswordByEmail(email: Swift.String) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func resetPasswordWithOldPassword(oldPassWord: Swift.String, newPassWord: Swift.String) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func transAnonymousUserToEmailUser(email: Swift.String, password: Swift.String) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func transAnonymousUserToPhoneUser(phone: Swift.String, password: Swift.String, code: Swift.String) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func transAnonymousUserToNormalUser(username: Swift.String, password: Swift.String) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func logout() async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func changeUserInfo(info: GizwitsiOSSDK.GizUserProfile) async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getUserInfo() async -> GizwitsiOSSDK.GizResult<Swift.Int?, GizwitsiOSSDK.GizAPIException?>
  #endif
  public func getAuthorizeData() -> GizwitsiOSSDK.GizLoginResultInfo
  public func updateAuthorizeData(token: Swift.String, uid: Swift.String)
  @objc deinit
}
public enum GizMQTTException : Swift.Int, Swift.Codable {
  case GIZ_MQTT_SUBSCRIBE_NO_SESSION
  case GIZ_MQTT_SUBSCRIBE_DEVICE_REPORT_ING
  case GIZ_MQTT_UNSUBSCRIBE_DEVICE_REPORT_ING
  case GIZ_MQTT_SUBSCRIBE_DEVICE_REPORT_FAIL
  case GIZ_MQTT_UNSUBSCRIBE_DEVICE_REPORT_FAIL
  case GIZ_MQTT_SUBSCRIBE_DEVICE_REPLY_ING
  case GIZ_MQTT_UNSUBSCRIBE_DEVICE_REPLY_ING
  case GIZ_MQTT_SUBSCRIBE_DEVICE_REPLY_FAIL
  case GIZ_MQTT_UNSUBSCRIBE_DEVICE_REPLY_FAIL
  case GIZ_MQTT_SUBSCRIBE_OTHER_APP_TO_DEVICE_ING
  case GIZ_MQTT_UNSUBSCRIBE_OTHER_APP_TO_DEVICE_ING
  case GIZ_MQTT_SUBSCRIBE_OTHER_APP_TO_DEVICE_FAIL
  case GIZ_MQTT_UNSUBSCRIBE_OTHER_APP_TO_DEVICE_FAIL
  case GIZ_MQTT_SUBSCRIBE_SER_TO_CLI_ING
  case GIZ_MQTT_UNSUBSCRIBE_SER_TO_CLI_ING
  case GIZ_MQTT_SUBSCRIBE_SER_TO_CLI_FAIL
  case GIZ_MQTT_UNSUBSCRIBE_SER_TO_CLI_FAIL
  case GIZ_SDK_WS_DEVICE_SUBSCRIBE_FAILED
  case GIZ_SDK_WS_DEVICE_UNSUBSCRIBE_FAILED
  case GIZ_MQTT_SUBSCRIBE_NO_RIGHT_INIT
  case GIZ_MQTT_SESSION_NO_CONNECTED
  case GIZ_MQTT_SESSION_PUBLISH_DATA_TO_DEVICE_FAIL
  case GIZ_MQTT_UNKNOW_ERROR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct DeviceInfoProfile : Swift.Codable {
  public var moduleHardVersion: Swift.String
  public var moduleSoftVersion: Swift.String
  public var mcuHardVersion: Swift.String
  public var mcuSoftVersion: Swift.String
  public var protocolVersion: Swift.String
  public var serialPortprotocolVersion: Swift.String
  public var reserve1: Swift.String
  public var reserve2: Swift.String
  public var productKey: Swift.String
  public var hardwareInfo: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension Swift.StringProtocol {
  public func toPointer() -> Swift.UnsafePointer<Swift.UInt8>?
}
extension Foundation.Data {
  public init?(hex: Swift.String)
  public struct HexEncodingOptions : Swift.OptionSet {
    public init(rawValue: Swift.Int)
    public let rawValue: Swift.Int
    public static let upperCase: Foundation.Data.HexEncodingOptions
    public typealias ArrayLiteralElement = Foundation.Data.HexEncodingOptions
    public typealias Element = Foundation.Data.HexEncodingOptions
    public typealias RawValue = Swift.Int
  }
  public func hexEncodedString(options: Foundation.Data.HexEncodingOptions = []) -> Swift.String
  public func asciiEncodedString() -> Swift.String
}
@_hasMissingDesignatedInitializers public class GizSDKManager : Foundation.ObservableObject {
  public var isInit: Swift.Bool
  @Combine.Published @_projectedValueProperty($devices) public var devices: [GizwitsiOSSDK.GizDevice] {
    get
  }
  public var $devices: Combine.Published<[GizwitsiOSSDK.GizDevice]>.Publisher {
    get
  }
  public static let sharedInstance: GizwitsiOSSDK.GizSDKManager
  #if compiler(>=5.3) && $AsyncAwait
  public func feedback(uploadLog: Swift.Bool, contact: Swift.String, content: Swift.String) async
  #endif
  public func initSDK(config: GizwitsiOSSDK.GizConfigStruct)
  #if compiler(>=5.3) && $AsyncAwait
  public func getProductDataPointConfig(productKey: Swift.String) async -> Swift.String?
  #endif
  public func startBleScan()
  public func stopBleScan()
  public func setDelegate(delegate: any GizwitsiOSSDK.GizSdkEventHandlerDelegate)
  #if compiler(>=5.3) && $AsyncAwait
  public func getDevices() async -> Swift.Array<GizwitsiOSSDK.GizDevice>
  #endif
  public func onDeviceListUpdate(devices: Swift.Array<GizwitsiOSSDK.GizBaseProfile>)
  public func onDeviceData(device: GizwitsiOSSDK.GizBaseProfile, result: GizwitsiOSSDK.GizJSON, type: GizwitsiOSSDK.GizCapability)
  public func onDeviceState(device: GizwitsiOSSDK.GizBaseProfile, type: GizwitsiOSSDK.GizCapability)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension GizwitsiOSSDK.GizSDKManager {
  public func cleanCache()
}
@_hasMissingDesignatedInitializers public class ProductManager {
  public static let sharedInstance: GizwitsiOSSDK.ProductManager
  public func initWithDomain(domain: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func getConfig(productKey: Swift.String) async -> Swift.String?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getConfigStruct(productKey: Swift.String) async -> GizwitsiOSSDK.DataPointConfig?
  #endif
  @objc deinit
}
public struct DataPointPosition : Swift.Codable {
  public let byte_offset: Swift.Int
  public let unit: Swift.String
  public let len: Swift.Int
  public let bit_offset: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointEnumAttribute : Swift.Codable {
  public let display_name: Swift.String
  public let name: Swift.String
  public let data_type: Swift.String
  public let position: GizwitsiOSSDK.DataPointPosition
  public let type: Swift.String
  public let id: Swift.Int
  public let desc: Swift.String
  public let enumValues: [Swift.String]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointUIntSpec : Swift.Codable {
  public let addition: Swift.Double?
  public let max: Swift.Double
  public let ratio: Swift.Int?
  public let step: Swift.Double?
  public let min: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointUIntAttribute : Swift.Codable {
  public let display_name: Swift.String
  public let name: Swift.String
  public let data_type: Swift.String
  public let position: GizwitsiOSSDK.DataPointPosition
  public let uint_spec: GizwitsiOSSDK.DataPointUIntSpec
  public let type: Swift.String
  public let id: Swift.Int
  public let desc: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointEntity : Swift.Codable {
  public let display_name: Swift.String
  public let attrs: [GizwitsiOSSDK.DataPointAttribute]
  public let name: Swift.String
  public let id: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointAttribute : Swift.Codable {
  public let display_name: Swift.String
  public let name: Swift.String
  public let data_type: Swift.String
  public let position: GizwitsiOSSDK.DataPointPosition
  public let type: Swift.String
  public let id: Swift.Int
  public let desc: Swift.String
  public let `enum`: [Swift.String]?
  public let uintAttribute: GizwitsiOSSDK.DataPointUIntAttribute?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointUIObject : Swift.Codable {
  public let version: Swift.Int
  public let showEditButton: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointUISection : Swift.Codable {
  public let elements: [GizwitsiOSSDK.DataPointUIElement]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointUIElement : Swift.Codable, Swift.Hashable {
  public static func == (lhs: GizwitsiOSSDK.DataPointUIElement, rhs: GizwitsiOSSDK.DataPointUIElement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public let boolValue: Swift.Bool?
  public let object: GizwitsiOSSDK.DataPointUIElementObject
  public let type: Swift.String
  public let key: Swift.String
  public let title: Swift.String
  public let items: [Swift.String]?
  public let bind: Swift.String?
  public let value: Swift.Float?
  public let maximumValue: Swift.Float?
  public let minimumValue: Swift.Float?
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointUIElementObject : Swift.Codable {
  public let action: Swift.String
  public let bind: [Swift.String]
  public let perm: Swift.String
  public let uint_spec: GizwitsiOSSDK.DataPointUIntSpec?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointConfig : Swift.Codable {
  public let name: Swift.String
  public let packetVersion: Swift.String
  public let protocolType: Swift.String
  public let product_key: Swift.String
  public let entities: [GizwitsiOSSDK.DataPointEntity]
  public let ui: GizwitsiOSSDK.DataPointUI
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataPointUI : Swift.Codable {
  public let object: GizwitsiOSSDK.DataPointUIObject
  public let sections: [GizwitsiOSSDK.DataPointUISection]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum GizCtrlException : Swift.Int, Swift.Codable {
  case GIZ_SDK_REQUEST_TIMEOUT
  case GIZ_SDK_DEVICE_CONTROL_FAILED
  case GIZ_SDK_DATAPOINT_PARSE_FAILED
  case GIZ_SDK_DEVICE_NOT_READY
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol GizSdkEventHandlerDelegate {
  func onDeviceListUpdate(devices: Swift.Array<GizwitsiOSSDK.GizDevice>)
  func onDeviceData(device: GizwitsiOSSDK.GizDevice, result: GizwitsiOSSDK.GizJSON, type: GizwitsiOSSDK.GizCapability)
  func onDeviceState(device: GizwitsiOSSDK.GizDevice, state: GizwitsiOSSDK.GizWifiDeviceNetStatus, isLogin: Swift.Bool, type: GizwitsiOSSDK.GizCapability)
  func onDeviceBindState(did: Swift.String, isBind: Swift.Bool)
}
@_hasMissingDesignatedInitializers public class GizDevice : GizwitsiOSSDK.GizBaseProfile {
  @Combine.Published @_projectedValueProperty($bleCapability) public var bleCapability: GizwitsiOSSDK.GizBleCapability {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $bleCapability: Combine.Published<GizwitsiOSSDK.GizBleCapability>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($mqttCapability) public var mqttCapability: GizwitsiOSSDK.GizMQTTCapability {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $mqttCapability: Combine.Published<GizwitsiOSSDK.GizMQTTCapability>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($lanCapability) public var lanCapability: GizwitsiOSSDK.GizLanCapability {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $lanCapability: Combine.Published<GizwitsiOSSDK.GizLanCapability>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  override public func encode(to encoder: any Swift.Encoder) throws
  public init(bleDevice: GizwitsiOSSDK.GizBleProfile?, lanDevice: GizwitsiOSSDK.GizLanProfile?, mqttDevice: GizwitsiOSSDK.GizMqttProfile?)
  #if compiler(>=5.3) && $AsyncAwait
  public func register() async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizRegisterDeviceResultInfo, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func updateDeviceInfo(alias: Swift.String?, remark: Swift.String?) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizUpdateDeviceResultInfo, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func bind(alias: Swift.String?, remark: Swift.String?) async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizBindDeviceResultInfo, GizwitsiOSSDK.GizAPIException?>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func unBind() async -> GizwitsiOSSDK.GizResult<GizwitsiOSSDK.GizUnBindDeviceResultInfo, GizwitsiOSSDK.GizAPIException?>
  #endif
  @objc deinit
}
public enum GizConnectException : Swift.Int, Swift.Codable {
  case GIZ_SDK_CONNECTION_REFUSED
  case GIZ_SDK_CONNECTING
  case GIZ_SDK_DEVICE_NOT_READY
  case GIZ_SDK_DISCONNECT_FAILED
  case GIZ_SDK_BLE_PARAM_UUID_INFO_REQUIRED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct GizOTAProgressData : Swift.Encodable {
  public var percentage: Swift.Int
  public var event: GizwitsiOSSDK.GizOTAEvent
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum GizOTAEvent : Swift.String, Swift.Encodable {
  case GizOTAEventCheckingDeviceVersion
  case GizOTAEventDownloading
  case GizOTAEventTransferring
  case GizOTAEventVerification
  case GizOTAEventFinish
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol GizOpenApiResultInfo : Swift.Decodable, Swift.Encodable {
  init(_: Swift.Dictionary<Swift.String, Any>)
}
@_inheritsConvenienceInitializers public class GizOpenApiResult<T> : GizwitsiOSSDK.GizResult<T, GizwitsiOSSDK.GizAPIException?> where T : GizwitsiOSSDK.GizOpenApiResultInfo {
  override public init(message: Swift.String?, data: T?, error: GizwitsiOSSDK.GizAPIException??, success: Swift.Bool)
  @objc deinit
}
public struct GizOpenApiErrorInfo : GizwitsiOSSDK.GizOpenApiResultInfo {
  public init(_ dic: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizDataPointResultInfo : GizwitsiOSSDK.GizOpenApiResultInfo {
  public init(_ dic: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizLoginResultInfo : GizwitsiOSSDK.GizOpenApiResultInfo {
  public var uid: Swift.String
  public var token: Swift.String
  public var expireAt: Swift.Int
  public init(_ dic: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizVerifyCodeResultInfo : GizwitsiOSSDK.GizOpenApiResultInfo {
  public init(_ dic: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizRegisterDeviceResultInfo : GizwitsiOSSDK.GizOpenApiResultInfo, Swift.Codable {
  public var failedDevices: [GizwitsiOSSDK.RegisterDeviceInfo]
  public var successDevices: [GizwitsiOSSDK.RegisterDeviceInfo]
  public init(_: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizCheckUpdateResultInfo : GizwitsiOSSDK.GizOpenApiResultInfo, Swift.Codable {
  public var downloadUrl: Swift.String
  public var softVersion: Swift.String
  public var currentSoftVersion: Swift.String
  public mutating func setCurrentSoftVersion(currentSoftVersion: Swift.String)
  public init(_ dic: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizUnBindDeviceResultInfo : GizwitsiOSSDK.GizOpenApiResultInfo, Swift.Codable {
  public init(_ dic: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizUpdateDeviceResultInfo : GizwitsiOSSDK.GizOpenApiResultInfo, Swift.Codable {
  public var remark: Swift.String
  public var alias: Swift.String
  public init(_ dic: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GizBindDeviceResultInfo : GizwitsiOSSDK.GizOpenApiResultInfo, Swift.Codable {
  public var mac: Swift.String
  public var did: Swift.String
  public var productKey: Swift.String
  public var alias: Swift.String
  public init(_ dic: Swift.Dictionary<Swift.String, Any>)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension GizwitsiOSSDK.GizActivatorException : Swift.Equatable {}
extension GizwitsiOSSDK.GizActivatorException : Swift.Hashable {}
extension GizwitsiOSSDK.GizActivatorException : Swift.RawRepresentable {}
extension GizwitsiOSSDK.AuthenticationMethod : Swift.Equatable {}
extension GizwitsiOSSDK.AuthenticationMethod : Swift.Hashable {}
extension GizwitsiOSSDK.AuthenticationMethod : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizProtocolVersion : Swift.Equatable {}
extension GizwitsiOSSDK.GizProtocolVersion : Swift.Hashable {}
extension GizwitsiOSSDK.GizProtocolVersion : Swift.RawRepresentable {}
extension GizwitsiOSSDK.BlueToothType : Swift.Equatable {}
extension GizwitsiOSSDK.BlueToothType : Swift.Hashable {}
extension GizwitsiOSSDK.BlueToothType : Swift.RawRepresentable {}
extension GizwitsiOSSDK.BlueToothVersion : Swift.Equatable {}
extension GizwitsiOSSDK.BlueToothVersion : Swift.Hashable {}
extension GizwitsiOSSDK.BlueToothVersion : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizOTAException : Swift.Equatable {}
extension GizwitsiOSSDK.GizOTAException : Swift.Hashable {}
extension GizwitsiOSSDK.GizOTAException : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizAPIException : Swift.Equatable {}
extension GizwitsiOSSDK.GizAPIException : Swift.Hashable {}
extension GizwitsiOSSDK.GizAPIException : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizJSONError : Swift.Equatable {}
extension GizwitsiOSSDK.GizJSONError : Swift.Hashable {}
extension GizwitsiOSSDK.GizJSONError : Swift.RawRepresentable {}
extension GizwitsiOSSDK.`Type` : Swift.Equatable {}
extension GizwitsiOSSDK.`Type` : Swift.Hashable {}
extension GizwitsiOSSDK.`Type` : Swift.RawRepresentable {}
extension GizwitsiOSSDK.writingOptionsKeys : Swift.Equatable {}
extension GizwitsiOSSDK.writingOptionsKeys : Swift.Hashable {}
extension GizwitsiOSSDK.GizWiFiActivatorEvent : Swift.Equatable {}
extension GizwitsiOSSDK.GizWiFiActivatorEvent : Swift.Hashable {}
extension GizwitsiOSSDK.GizWiFiActivatorEvent : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizWifiDeviceNetStatus : Swift.Equatable {}
extension GizwitsiOSSDK.GizWifiDeviceNetStatus : Swift.Hashable {}
extension GizwitsiOSSDK.GizWifiDeviceNetStatus : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizOTAFirmwareType : Swift.Equatable {}
extension GizwitsiOSSDK.GizOTAFirmwareType : Swift.Hashable {}
extension GizwitsiOSSDK.GizOTAFirmwareType : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizCapability : Swift.Equatable {}
extension GizwitsiOSSDK.GizCapability : Swift.Hashable {}
extension GizwitsiOSSDK.GizCapability : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizUserGenderType : Swift.Equatable {}
extension GizwitsiOSSDK.GizUserGenderType : Swift.Hashable {}
extension GizwitsiOSSDK.GizUserGenderType : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizAuth2AccountType : Swift.Equatable {}
extension GizwitsiOSSDK.GizAuth2AccountType : Swift.Hashable {}
extension GizwitsiOSSDK.GizAuth2AccountType : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizMQTTException : Swift.Equatable {}
extension GizwitsiOSSDK.GizMQTTException : Swift.Hashable {}
extension GizwitsiOSSDK.GizMQTTException : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizCtrlException : Swift.Equatable {}
extension GizwitsiOSSDK.GizCtrlException : Swift.Hashable {}
extension GizwitsiOSSDK.GizCtrlException : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizConnectException : Swift.Equatable {}
extension GizwitsiOSSDK.GizConnectException : Swift.Hashable {}
extension GizwitsiOSSDK.GizConnectException : Swift.RawRepresentable {}
extension GizwitsiOSSDK.GizOTAEvent : Swift.Equatable {}
extension GizwitsiOSSDK.GizOTAEvent : Swift.Hashable {}
extension GizwitsiOSSDK.GizOTAEvent : Swift.RawRepresentable {}
